Index: test/LexerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport lexer.Lexer;\nimport lexer.LexerImpl;\nimport tokens.AdditionSymbol;\nimport tokens.BracketClose;\nimport tokens.BracketOpen;\nimport tokens.ErrorToken;\nimport tokens.MultiplicationSymbol;\nimport tokens.NaturalNumberToken;\nimport tokens.Token;\n\nclass LexerTest {\n\tprivate Lexer lexer;\n\t@BeforeEach\n\tvoid setUp() throws Exception {\n\t\tlexer = new LexerImpl();\n\t}\n\t@Test\n\tvoid test1() {\n\t\tList<Token> result = lexer.toTokenSequence(\"1\");\n\t\tList<Token> expected = new ArrayList<>(); \n\t\texpected.add(new NaturalNumberToken(1));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test2() {\n\t\tList<Token> result = lexer.toTokenSequence(\"1 + 2\");\n\t\tList<Token> expected = new ArrayList<>(); \n\t\texpected.add(new NaturalNumberToken(1));\n\t\texpected.add(AdditionSymbol.getTheInstance());\n\t\texpected.add(new NaturalNumberToken(2));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test3() {\n\t\tList<Token> result = lexer.toTokenSequence(\"1 * 2\");\n\t\tList<Token> expected = new ArrayList<>(); \n\t\texpected.add(new NaturalNumberToken(1));\n\t\texpected.add(MultiplicationSymbol.getTheInstance());\n\t\texpected.add(new NaturalNumberToken(2));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test4() {\n\t\tList<Token> result = lexer.toTokenSequence(\"X\");\n\t\tList<Token> expected = new ArrayList<>(); \n\t\texpected.add(new ErrorToken(\"X\"));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test5() {\n\t\tList<Token> result = lexer.toTokenSequence(\"X + 1 Y\");\n\t\tList<Token> expected = new ArrayList<>(); \n\t\texpected.add(new ErrorToken(\"X\"));\n\t\texpected.add(AdditionSymbol.getTheInstance());\n\t\texpected.add(new NaturalNumberToken(1));\n\t\texpected.add(new ErrorToken(\"Y\"));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test6() {\n\t\tList<Token> result = lexer.toTokenSequence(\"(1 + 2)*3\");\n\t\tList<Token> expected = new ArrayList<>();\n\t\texpected.add(BracketOpen.getTheInstance());\n\t\texpected.add(new NaturalNumberToken(1));\n\t\texpected.add(AdditionSymbol.getTheInstance());\n\t\texpected.add(new NaturalNumberToken(2));\n\t\texpected.add(BracketClose.getTheInstance());\n\t\texpected.add(MultiplicationSymbol.getTheInstance());\n\t\texpected.add(new NaturalNumberToken(3));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test7() {\n\t\tList<Token> result = lexer.toTokenSequence(\"1001\");\n\t\tList<Token> expected = new ArrayList<>();\n\t\texpected.add(new NaturalNumberToken(1001));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test8() {\n\t\tList<Token> result = lexer.toTokenSequence(\"007\");\n\t\tList<Token> expected = new ArrayList<>();\n\t\texpected.add(new NaturalNumberToken(7));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test9() {\n\t\tList<Token> result = lexer.toTokenSequence(\"701 89\");\n\t\tList<Token> expected = new ArrayList<>();\n\t\texpected.add(new NaturalNumberToken(701));\n\t\texpected.add(new NaturalNumberToken(89));\n\t\tassertEquals(expected, result);\n\t}\n\t@Test\n\tvoid test10() {\n\t\tList<Token> result = lexer.toTokenSequence(\"())\");\n\t\tList<Token> expected = new ArrayList<>();\n\t\texpected.add(BracketOpen.getTheInstance());\n\t\texpected.add(BracketClose.getTheInstance());\n\t\texpected.add(BracketClose.getTheInstance());\n\t\tassertEquals(expected, result);\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/LexerTest.java b/test/LexerTest.java
--- a/test/LexerTest.java	(revision db54d2612afed7b87c8e1a2bca9733fd3b180c30)
+++ b/test/LexerTest.java	(date 1692188813481)
@@ -109,4 +109,15 @@
 		expected.add(BracketClose.getTheInstance());
 		assertEquals(expected, result);
 	}
+	@Test
+	void test11() {
+		List<Token> result = lexer.toTokenSequence("(1+2)");
+		List<Token> expected = new ArrayList<>();
+		expected.add(BracketOpen.getTheInstance());
+		expected.add(new NaturalNumberToken(1));
+		expected.add(AdditionSymbol.getTheInstance());
+		expected.add(new NaturalNumberToken(2));
+		expected.add(BracketClose.getTheInstance());
+		assertEquals(expected, result);
+	}
 }
Index: src/lexer/LexerImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lexer;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport basic.TextConstants;\nimport tokens.Token;\npublic class LexerImpl implements Lexer {\n\tprivate LexerState state;\t\t\t// State Pattern\n\tprivate String currentExpression;\t// Input \t(reduced during scanning)\n\tprivate List<Token> currentResult;\t// Output \t(grows during scanning) \n\tpublic LexerImpl() {\n\t\tsuper();\n\t\tthis.currentExpression = TextConstants.EMPTYWORD;\t\n\t\tthis.currentResult = new ArrayList<Token>();\n\t\tthis.state = new SelectionState(this); // Start State\n\t}\n\tpublic List<Token> toTokenSequence(String expr){ \n\t\tthis.currentResult.clear();\n\t\tthis.currentExpression = expr;\t\t\t\t\n\t\t\n// Main Loop with delegation of work to state objects:\n\t\twhile(this.currentExpression.length()>0) this.state.scan(this.currentExpression.charAt(0));\n\n\t\treturn this.currentResult; \n\t}\n\tpublic void skip(){\n\t\tthis.currentExpression = this.currentExpression.substring(1);\n\t}\n\tpublic void addSymbol(Token s){\n\t\tthis.currentResult.add(s);\n\t}\n\tpublic void setState(LexerState newState){\n\t\tthis.state = newState;\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lexer/LexerImpl.java b/src/lexer/LexerImpl.java
--- a/src/lexer/LexerImpl.java	(revision db54d2612afed7b87c8e1a2bca9733fd3b180c30)
+++ b/src/lexer/LexerImpl.java	(date 1692191915979)
@@ -20,7 +20,7 @@
 		
 // Main Loop with delegation of work to state objects:
 		while(this.currentExpression.length()>0) this.state.scan(this.currentExpression.charAt(0));
-
+		this.state.onTermination();
 		return this.currentResult; 
 	}
 	public void skip(){
Index: src/lexer/DigitState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lexer;\nimport tokens.NaturalNumberToken;\n/**\n * Digit Processing \n */\npublic class DigitState extends LexerState {\n    private Integer collectedDigits;\n\tpublic DigitState(Lexer myLexer){\n\t\tsuper(myLexer);\n\t\tthis.collectedDigits = 0;\n\t}\n\tpublic void scan(Character c) {\n\t\tif(Character.isDigit(c)){\n\t\t\tthis.collectedDigits = \tthis.collectedDigits * 10 + Integer.parseInt(c.toString());\n\t\t\tthis.getMyLexer().skip();\n\t\t}else{\n\t\t\tthis.addSymbol();\n\t\t\tthis.endOfProcessing();\n\t\t}\n\t}\n\tpublic void addSymbol(){\n\t\tthis.getMyLexer().addSymbol(new NaturalNumberToken(this.collectedDigits));\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lexer/DigitState.java b/src/lexer/DigitState.java
--- a/src/lexer/DigitState.java	(revision db54d2612afed7b87c8e1a2bca9733fd3b180c30)
+++ b/src/lexer/DigitState.java	(date 1692191974635)
@@ -18,6 +18,13 @@
 			this.endOfProcessing();
 		}
 	}
+
+
+	@Override
+	public void onTermination() {
+		this.addSymbol();
+	}
+
 	public void addSymbol(){
 		this.getMyLexer().addSymbol(new NaturalNumberToken(this.collectedDigits));
 	}
Index: src/lexer/LexerState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lexer;\n/** \n * Lexer state pattern\n * Each state knows the lexer, whose state it is, by an attribute, i.e. a permanent reference\n * --> scan Operation does not carry formal parameter of type Lexer(Impl)\n */\npublic abstract class LexerState {\n\tprivate Lexer myLexer;\n\tpublic LexerState(Lexer myLexer) {\n\t\tsuper();\n\t\tthis.myLexer = myLexer;\n\t}\n\n/**\n * May add symbol to current Scanner result depending on <c>, \n * May erase <c> in input string \n * May change state    \n */\n\tpublic abstract void scan(Character c);\n\t\n// =================================================================\n// ================ Auxiliary operations for subclasses ============\n// =================================================================\t\n\tprotected void endOfProcessing(){\n\t\tthis.getMyLexer().setState(new SelectionState(this.getMyLexer()));\n\t}\n\tprotected Lexer getMyLexer(){\n\t\treturn this.myLexer;\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lexer/LexerState.java b/src/lexer/LexerState.java
--- a/src/lexer/LexerState.java	(revision db54d2612afed7b87c8e1a2bca9733fd3b180c30)
+++ b/src/lexer/LexerState.java	(date 1692191881821)
@@ -12,15 +12,21 @@
 	}
 
 /**
- * May add symbol to current Scanner result depending on <c>, 
- * May erase <c> in input string 
- * May change state    
+ * May add symbol to current Scanner result depending on <c>,
+ * May erase <c> in input string
+ * May change state
  */
 	public abstract void scan(Character c);
-	
+
+
 // =================================================================
 // ================ Auxiliary operations for subclasses ============
-// =================================================================	
+// =================================================================
+
+	/**
+	 * Do nothing
+	 */
+	public void onTermination() {}
 	protected void endOfProcessing(){
 		this.getMyLexer().setState(new SelectionState(this.getMyLexer()));
 	}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/bin/\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision db54d2612afed7b87c8e1a2bca9733fd3b180c30)
+++ b/.gitignore	(date 1692178916857)
@@ -1,1 +1,2 @@
 /bin/
+.idea/
Index: src/lexer/stateSelection/UML.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lexer/stateSelection/UML.svg b/src/lexer/stateSelection/UML.svg
new file mode 100644
--- /dev/null	(date 1692613965407)
+++ b/src/lexer/stateSelection/UML.svg	(date 1692613965407)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Do not edit this file with editors other than diagrams.net -->
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1051px" height="509px" viewBox="-0.5 -0.5 1051 509" content="&lt;mxfile host=&quot;drawio-plugin&quot; modified=&quot;2023-08-21T10:32:45.399Z&quot; agent=&quot;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36&quot; etag=&quot;ZUwl2VOuwKJU22xCu8O_&quot; version=&quot;20.5.3&quot; type=&quot;embed&quot;&gt;&lt;diagram id=&quot;23iRSUPoRavnBvh4doch&quot; name=&quot;Page-1&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;"><defs><clipPath id="mx-clip-414-62-252-26-0"><rect x="414" y="62" width="252" height="26"/></clipPath><clipPath id="mx-clip-31-212-312-26-0"><rect x="31" y="212" width="312" height="26"/></clipPath><clipPath id="mx-clip-31-238-312-26-0"><rect x="31" y="238" width="312" height="26"/></clipPath><clipPath id="mx-clip-31-264-312-26-0"><rect x="31" y="264" width="312" height="26"/></clipPath><clipPath id="mx-clip-31-290-312-26-0"><rect x="31" y="290" width="312" height="26"/></clipPath><clipPath id="mx-clip-734-198-312-26-0"><rect x="734" y="198" width="312" height="26"/></clipPath><clipPath id="mx-clip-384-198-312-26-0"><rect x="384" y="198" width="312" height="26"/></clipPath><clipPath id="mx-clip-294-458-222-26-0"><rect x="294" y="458" width="222" height="26"/></clipPath><clipPath id="mx-clip-294-484-222-26-0"><rect x="294" y="484" width="222" height="26"/></clipPath><clipPath id="mx-clip-559-458-222-26-0"><rect x="559" y="458" width="222" height="26"/></clipPath><clipPath id="mx-clip-559-484-222-26-0"><rect x="559" y="484" width="222" height="26"/></clipPath><clipPath id="mx-clip-824-458-222-26-0"><rect x="824" y="458" width="222" height="26"/></clipPath><clipPath id="mx-clip-824-484-222-26-0"><rect x="824" y="484" width="222" height="26"/></clipPath><clipPath id="mx-clip-31-458-222-26-0"><rect x="31" y="458" width="222" height="26"/></clipPath><clipPath id="mx-clip-31-484-222-26-0"><rect x="31" y="484" width="222" height="26"/></clipPath></defs><g><path d="M 187 167 L 187 130 L 540 130 L 540 96.12" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 540 84.12 L 546 96.12 L 534 96.12 Z" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 410 57 L 410 27 L 670 27 L 670 57" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 410 57 L 410 83 L 670 83 L 670 57" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 410 57 L 670 57" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="539.5" y="39.5">StateSelector</text><text x="539.5" y="53.5">&lt;&lt;interface&gt;&gt;</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-414-62-252-26-0)" font-size="12px"><text x="415.5" y="74.5">+ selectStateFor(c: Character, scanner: Lexer)</text></g><path d="M 27 246 L 7 246 L 7 55 L 407.76 55" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 401.88 58.5 L 408.88 55 L 401.88 51.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 63px; margin-left: 371px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">successor</div></div></div></foreignObject><text x="371" y="67" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">successor</text></switch></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 47px; margin-left: 392px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">1</div></div></div></foreignObject><text x="392" y="51" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">1</text></switch></g><path d="M 27 207 L 27 167 L 347 167 L 347 207" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 27 207 L 27 311 L 347 311 L 347 207" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 27 207 L 347 207" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="186.5" y="184.5">StateSelectionLink</text><text x="186.5" y="198.5">{abstract}</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-31-212-312-26-0)" font-size="12px"><text x="32.5" y="224.5">+ myCondition(c: Character): boolean {abstract}</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-31-238-312-26-0)" font-size="12px"><text x="32.5" y="250.5">+ myState(scanner: Lexer): LexerState</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-31-264-312-26-0)" font-size="12px"><text x="32.5" y="276.5">+ selectStateFor(c: Characterscanner: Lexer): LexerState</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-31-290-312-26-0)" font-size="12px"><text x="32.5" y="302.5">+ getSuccessor(): StateSelector</text></g><path d="M 890 167 L 890 130 L 540 130 L 540 96.12" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 540 84.12 L 546 96.12 L 534 96.12 Z" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 970 167 L 970 7 L 107 7 L 107 164.76" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 103.5 158.88 L 107 165.88 L 110.5 158.88" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 142px; margin-left: 121px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;"><span style="font-size: 12px; text-align: left; background-color: rgb(248, 249, 250);">first</span></div></div></div></foreignObject><text x="121" y="146" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">first</text></switch></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 142px; margin-left: 100px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">1</div></div></div></foreignObject><text x="100" y="145" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">1</text></switch></g><path d="M 730 193 L 730 167 L 1050 167 L 1050 193" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 730 193 L 730 219 L 1050 219 L 1050 193" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 730 193 L 1050 193" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="889.5" y="184.5">StateSelectionGateway</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-734-198-312-26-0)" font-size="12px"><text x="735.5" y="210.5">+ selectStateFor(c: Character, scanner: Lexer): LexerState</text></g><path d="M 540 167 L 540 96.12" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 540 84.12 L 546 96.12 L 534 96.12 Z" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 380 193 L 380 167 L 700 167 L 700 193" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 380 193 L 380 219 L 700 219 L 700 193" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 380 193 L 700 193" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="539.5" y="184.5">StateSelectionEnding</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-384-198-312-26-0)" font-size="12px"><text x="385.5" y="210.5">+ selectStateFor(c: Character, scanner: Lexer): LexerState</text></g><path d="M 405 427 L 405 374 L 187 374 L 187 324.12" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 187 312.12 L 193 324.12 L 181 324.12 Z" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 290 453 L 290 427 L 520 427 L 520 453" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 290 453 L 290 505 L 520 505 L 520 453" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 290 453 L 520 453" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="404.5" y="444.5">DigitTester</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-294-458-222-26-0)" font-size="12px"><text x="295.5" y="470.5">+ selectStateFor(c: Character): boolean</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-294-484-222-26-0)" font-size="12px"><text x="295.5" y="496.5">+ myState(scanner: Lexer): LexerState</text></g><path d="M 670 427 L 670 374 L 187 374 L 187 324.12" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 187 312.12 L 193 324.12 L 181 324.12 Z" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 555 453 L 555 427 L 785 427 L 785 453" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 555 453 L 555 505 L 785 505 L 785 453" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 555 453 L 785 453" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="669.5" y="444.5">BracketTester</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-559-458-222-26-0)" font-size="12px"><text x="560.5" y="470.5">+ selectStateFor(c: Character): boolean</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-559-484-222-26-0)" font-size="12px"><text x="560.5" y="496.5">+ myState(scanner: Lexer): LexerState</text></g><path d="M 935 427 L 935 374 L 187 374 L 187 324.12" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 187 312.12 L 193 324.12 L 181 324.12 Z" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 820 453 L 820 427 L 1050 427 L 1050 453" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 820 453 L 820 505 L 1050 505 L 1050 453" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 820 453 L 1050 453" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="934.5" y="444.5">OperatorTester</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-824-458-222-26-0)" font-size="12px"><text x="825.5" y="470.5">+ selectStateFor(c: Character): boolean</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-824-484-222-26-0)" font-size="12px"><text x="825.5" y="496.5">+ myState(scanner: Lexer): LexerState</text></g><path d="M 142 427 L 142 374 L 187 374 L 187 324.12" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 187 312.12 L 193 324.12 L 181 324.12 Z" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 27 453 L 27 427 L 257 427 L 257 453" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 27 453 L 27 505 L 257 505 L 257 453" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 27 453 L 257 453" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="141.5" y="444.5">WhiteSpaceTester</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-31-458-222-26-0)" font-size="12px"><text x="32.5" y="470.5">+ selectStateFor(c: Character): boolean</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-31-484-222-26-0)" font-size="12px"><text x="32.5" y="496.5">+ myState(scanner: Lexer): LexerState</text></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
\ No newline at end of file
Index: readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/readme.md b/readme.md
new file mode 100644
--- /dev/null	(date 1692183645679)
+++ b/readme.md	(date 1692183645679)
@@ -0,0 +1,1 @@
+![src/](src/lexer/stateSelection/UML.svg)
\ No newline at end of file
